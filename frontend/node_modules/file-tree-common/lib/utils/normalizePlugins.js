'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Normalize plugins to an array of arrays,
// where the plugin is [plugin, options].

exports.default = function (plugins, pluginMap) {
  return plugins.map(function (plugin) {
    if (!Array.isArray(plugin)) {
      plugin = [plugin, {}];
    }

    if (typeof plugin[0] === 'string') {
      var _plugin = plugin;

      var _plugin2 = _slicedToArray(_plugin, 2);

      var name = _plugin2[0];
      var options = _plugin2[1];

      var resolved = pluginMap[name];

      if (!resolved) {
        throw new Error('Couldn\'t find plugin ' + name);
      }

      return [resolved, options || {}];
    }

    return plugin;
  });
};