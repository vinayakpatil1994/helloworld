'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var style = {
  position: 'absolute',
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  zIndex: 1000,
  backgroundColor: 'rgba(0,0,0,0.5)',
  border: '1px solid black',
  padding: 40
};

var buttonStyle = {
  backgroundColor: 'white',
  color: 'black',
  paddingLeft: 15,
  lineHeight: '40px'
};

// Prompt doesn't exist in electron, so just default to 'test' for now
var maybePrompt = function maybePrompt(instructions) {
  try {
    return prompt(instructions);
  } catch (e) {
    return 'test';
  }
};

var operations = {
  createFile: function createFile(controller, node) {
    var path = node.path;


    this.setState({ overlay: null });

    var newFileName = maybePrompt('Enter a name for the new file');
    if (!newFileName) {
      return;
    }

    var newPath = _path2.default.join(path, newFileName);
    if (!confirm('Write ' + newPath + '?')) {
      return;
    }

    controller.run('writeFile', newPath, '');
  },
  createDirectory: function createDirectory(controller, node) {
    var path = node.path;


    this.setState({ overlay: null });

    var newFileName = maybePrompt('Enter a name for the new directory');
    if (!newFileName) {
      return;
    }

    var newPath = _path2.default.join(path, newFileName);
    if (!confirm('Write ' + newPath + '?')) {
      return;
    }

    controller.run('mkdir', newPath);
  },
  rename: function rename(controller, node) {
    var path = node.path;


    this.setState({ overlay: null });

    var newFileName = maybePrompt('Enter a new name for ' + name);
    if (!newFileName) {
      return;
    }

    var newPath = _path2.default.join(_path2.default.dirname(path), newFileName);
    if (!confirm('Rename to ' + newPath + '?')) {
      return;
    }

    controller.run('rename', path, newPath);
  },
  delete: function _delete(controller, node) {
    var path = node.path;


    this.setState({ overlay: null });

    if (!confirm('Are you sure you want to delete ' + path + '?')) {
      return;
    }

    controller.run('remove', path);
  },
  setRootPath: function setRootPath(controller, node) {
    var path = node.path;


    this.setState({ overlay: null });

    var newPath = maybePrompt('Enter a new root path', path);
    if (!newPath) {
      return;
    }
    if (!confirm('Set root path to ' + newPath + '?')) {
      return;
    }

    controller.setRootPath(newPath);
  },
  search: function search(controller, node) {
    this.setState({ overlay: null });

    var text = maybePrompt('Search filenames');

    var startTime = +new Date();
    console.log(controller.search(text, 'file', 30).map(function (node) {
      return node.path;
    }));
    console.log('took', +new Date() - startTime);
  }

};

exports.default = {
  onContextMenu: function onContextMenu(pluginOptions, e, node, nodeMetadata, index) {
    var _this = this;

    e.preventDefault();

    var controller = this.props.controller;
    var type = node.type;
    var path = node.path;
    var name = node.name;


    var actions = [];

    if (type === 'directory') {
      actions.push(['Create file', operations.createFile]);
      actions.push(['Create directory', operations.createDirectory]);
    }
    actions.push(['Rename ' + name, operations.rename]);
    actions.push(['Delete ' + name, operations.delete]);
    actions.push(['Set root path', operations.setRootPath]);
    actions.push(['Search filenames', operations.search]);

    actions = actions.map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2);

      var title = _ref2[0];
      var f = _ref2[1];
      return [title, f.bind(_this, controller, node)];
    });

    var overlay = _react2.default.createElement(
      'div',
      { style: style,
        onClick: function onClick() {
          return _this.setState({ overlay: null });
        } },
      actions.map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2);

        var name = _ref4[0];
        var f = _ref4[1];

        return _react2.default.createElement(
          'div',
          {
            style: buttonStyle,
            key: name,
            onClick: f
          },
          name
        );
      })
    );

    this.setState({ overlay: overlay });
  }
};