'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fileTreeCommon = require('file-tree-common');

var getVisibleNodesByIndex = _fileTreeCommon.treeUtils.getVisibleNodesByIndex;
var countVisibleNodes = _fileTreeCommon.treeUtils.countVisibleNodes;


var selectNode = function selectNode(e, node, nodeMetadata, index) {
  var _props = this.props;
  var controller = _props.controller;
  var _props$onSelect = _props.onSelect;
  var onSelect = _props$onSelect === undefined ? function () {} : _props$onSelect;
  var path = node.path;
  var metadata = controller.metadata;

  // Disable all existing selections

  for (var key in metadata) {
    if (metadata[key] && metadata[key].selected) {
      controller.updateNodeMetadata(key, 'selected', false);
    }
  }

  controller.updateNodeMetadata(path, 'selected', true);

  onSelect.call(this, e, node, nodeMetadata, index);
};

var getSelectionInfo = function getSelectionInfo(tree, metadata) {
  var nodeInfo = getVisibleNodesByIndex(tree, metadata, 0, Infinity);

  var selectedIndex = 0;
  while (selectedIndex < nodeInfo.length) {
    var path = nodeInfo[selectedIndex].node.path;

    if (metadata[path] && metadata[path].selected) {
      break;
    }
    selectedIndex++;
  }

  return {
    nodes: nodeInfo.map(function (_ref) {
      var node = _ref.node;
      return node;
    }),
    selectedIndex: selectedIndex
  };
};

exports.default = {
  onClick: function onClick(pluginOptions, e, node, nodeMetadata, index) {
    var _props2 = this.props;
    var controller = _props2.controller;
    var _props2$onSelect = _props2.onSelect;
    var onSelect = _props2$onSelect === undefined ? function () {} : _props2$onSelect;
    var type = node.type;
    var path = node.path;
    var selected = nodeMetadata.selected;
    var _state = this.state;
    var tree = _state.tree;
    var metadata = _state.metadata;


    if (e.metaKey && pluginOptions.multiple !== false) {
      controller.updateNodeMetadata(path, 'selected', !selected);

      if (!selected) {
        onSelect.call(this, e, node, nodeMetadata, index);
      }
    } else if (e.shiftKey && pluginOptions.multiple !== false) {
      var _getSelectionInfo = getSelectionInfo(tree, metadata);

      var nodes = _getSelectionInfo.nodes;
      var selectedIndex = _getSelectionInfo.selectedIndex;

      var range = selectedIndex > index ? [index, selectedIndex] : [selectedIndex, index];

      for (var i = range[0]; i <= range[1]; i++) {
        var currentNode = nodes[i];
        var currentMetadata = metadata[currentNode.path] || {};
        var currentSelected = currentMetadata.selected;

        controller.updateNodeMetadata(currentNode.path, 'selected', true);

        if (!currentSelected) {
          onSelect.call(this, e, currentNode, currentMetadata, i);
        }
      }
    } else {
      selectNode.call(this, e, node, nodeMetadata, index);
    }
  },
  onKeyDown: function onKeyDown(pluginOptions, e) {
    var controller = this.props.controller;
    var _state2 = this.state;
    var tree = _state2.tree;
    var metadata = _state2.metadata;


    switch (e.which) {
      // up
      case 38:
        {
          var _getSelectionInfo2 = getSelectionInfo(tree, metadata);

          var nodes = _getSelectionInfo2.nodes;
          var selectedIndex = _getSelectionInfo2.selectedIndex;

          if (selectedIndex > 0) {
            e.preventDefault();
            var nextNode = nodes[selectedIndex - 1];
            selectNode.call(this, e, nextNode, metadata[nextNode.path] || {}, selectedIndex - 1);
          }
          break;
        }
      // down
      case 40:
        {
          var _getSelectionInfo3 = getSelectionInfo(tree, metadata);

          var _nodes = _getSelectionInfo3.nodes;
          var _selectedIndex = _getSelectionInfo3.selectedIndex;

          if (_selectedIndex < _nodes.length - 1) {
            e.preventDefault();
            var _nextNode = _nodes[_selectedIndex + 1];
            selectNode.call(this, e, _nextNode, metadata[_nextNode.path] || {}, _selectedIndex + 1);
          }
          break;
        }
    }
  }
};