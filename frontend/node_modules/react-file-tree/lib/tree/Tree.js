'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('react-virtualized/styles.css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactVirtualized = require('react-virtualized');

var _reactAddonsShallowCompare = require('react-addons-shallow-compare');

var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Node = require('./Node');

var _Node2 = _interopRequireDefault(_Node);

var _fileTreeCommon = require('file-tree-common');

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _select = require('./plugins/select');

var _select2 = _interopRequireDefault(_select);

var _expand = require('./plugins/expand');

var _expand2 = _interopRequireDefault(_expand);

var _actionsheet = require('./plugins/actionsheet');

var _actionsheet2 = _interopRequireDefault(_actionsheet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getVisibleNodesByIndex = _fileTreeCommon.treeUtils.getVisibleNodesByIndex;
var countVisibleNodes = _fileTreeCommon.treeUtils.countVisibleNodes;


var PLUGIN_MAP = {
  select: _select2.default,
  expand: _expand2.default,
  actionsheet: _actionsheet2.default
};

var _class = function (_Component) {
  _inherits(_class, _Component);

  function _class(props) {
    _classCallCheck(this, _class);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this));

    _this.handleClick = _this.handleEvent.bind(_this, 'onClick');
    _this.handleDoubleClick = _this.handleEvent.bind(_this, 'onDoubleClick');
    _this.handleMouseEnter = _this.handleEvent.bind(_this, 'onMouseEnter');
    _this.handleMouseLeave = _this.handleEvent.bind(_this, 'onMouseLeave');
    _this.handleKeyUp = _this.handleEvent.bind(_this, 'onKeyUp');
    _this.handleKeyDown = _this.handleEvent.bind(_this, 'onKeyDown');
    _this.handleContextMenu = _this.handleEvent.bind(_this, 'onContextMenu');
    _this.renderNode = _this.renderNode.bind(_this);

    _this.state = _this.mapPropsToState(props);
    return _this;
  }

  _createClass(_class, [{
    key: 'mapPropsToState',
    value: function mapPropsToState(props) {
      var controller = props.controller;
      var plugins = props.plugins;
      var _controller$tree$stat = controller.tree.state;
      var tree = _controller$tree$stat.tree;
      var metadata = _controller$tree$stat.metadata;
      var stat = _controller$tree$stat.stat;
      var version = _controller$tree$stat.version;


      return {
        version: version,
        tree: tree,
        metadata: metadata,
        stat: stat,
        visibleNodes: countVisibleNodes(tree, metadata),
        indexCache: getVisibleNodesByIndex(tree, metadata),
        plugins: (0, _fileTreeCommon.normalizePlugins)(plugins, PLUGIN_MAP)
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.controller.version !== this.state.version) {
        this.setState(this.mapPropsToState(nextProps));
      }
    }
  }, {
    key: 'runInOperation',
    value: function runInOperation(f) {
      this.props.controller.startOperation();
      try {
        f();
      } catch (e) {
        console.error('file-tree-client operation failed.');
        console.error(e);
      }
      this.props.controller.finishOperation();
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(eventName, node, metadata, index, e) {
      var _this2 = this;

      var plugins = this.state.plugins;
      var controller = this.props.controller;


      this.runInOperation(function () {

        // Run each plugin for this event
        plugins.forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2);

          var plugin = _ref2[0];
          var options = _ref2[1];

          if (plugin[eventName]) {
            plugin[eventName].call(_this2, options, e, node, metadata, index);
          }
        });

        // Run handlers passed as props
        if (_this2.props[eventName]) {
          _this2.props[eventName].call(_this2, e, node, metadata, index);
        }
      });
    }
  }, {
    key: 'renderNode',
    value: function renderNode(_ref3) {
      var index = _ref3.index;
      var renderNode = this.props.renderNode;
      var _state = this.state;
      var metadata = _state.metadata;
      var stat = _state.stat;
      var indexCache = _state.indexCache;
      var _indexCache$index = indexCache[index];
      var node = _indexCache$index.node;
      var depth = _indexCache$index.depth;
      var path = node.path;

      var nodeMetadata = metadata[path] || {};

      return _react2.default.createElement(
        'div',
        {
          style: _styles2.default.nodeContainer,
          tabIndex: '0',
          onClick: this.handleClick.bind(this, node, nodeMetadata, index),
          onDoubleClick: this.handleDoubleClick.bind(this, node, nodeMetadata, index),
          onMouseEnter: this.handleMouseEnter.bind(this, node, nodeMetadata, index),
          onMouseLeave: this.handleMouseLeave.bind(this, node, nodeMetadata, index),
          onKeyUp: this.handleKeyUp.bind(this, node, nodeMetadata, index),
          onKeyDown: this.handleKeyDown.bind(this, node, nodeMetadata, index),
          onContextMenu: this.handleContextMenu.bind(this, node, nodeMetadata, index)
        },
        renderNode({
          key: path,
          node: node,
          metadata: nodeMetadata,
          stat: stat[path],
          depth: depth,
          index: index
        })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var nodeHeight = this.props.nodeHeight;
      var _state2 = this.state;
      var visibleNodes = _state2.visibleNodes;
      var version = _state2.version;
      var overlay = _state2.overlay;


      return _react2.default.createElement(
        'div',
        { style: _styles2.default.treeContainer },
        _react2.default.createElement(
          'div',
          { style: _styles2.default.autoSizerWrapper },
          _react2.default.createElement(
            _reactVirtualized.AutoSizer,
            null,
            function (_ref4) {
              var width = _ref4.width;
              var height = _ref4.height;
              return _react2.default.createElement(_reactVirtualized.VirtualScroll, {
                height: height,
                overscanRowCount: 3,
                rowHeight: nodeHeight,
                rowRenderer: _this3.renderNode,
                rowCount: visibleNodes,
                width: width
                // Updates the VirtualScroll when data changes.
                // Prop is not actually used.
                , force: version
              });
            }
          )
        ),
        overlay
      );
    }
  }]);

  return _class;
}(_react.Component);

_class.defaultProps = {
  plugins: [],
  nodeHeight: 40,
  renderNode: function renderNode(props) {
    return _react2.default.createElement(_Node2.default, props);
  }
};
exports.default = _class;